{"version":3,"sources":["../../src/utils/token_validation.js"],"names":["Users","models","TokenValidation","req","res","next","token","headers","authorization","query","body","response","Response","status","code","json","id","jwt","verify","process","env","JWT_SECRET_KEY","user","findOne","where","attributes","exclude","requestPayload","error"],"mappings":"AAAA;;;;;;;AAEA;;AACA;;AACA;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,eAAlB;;AAEA,MAAMC,eAAN,CAAsB;;gBAAhBA,e,yBAG2B,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACnD,MAAI;AAEA;AACA,UAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,IACVL,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CADU,IAEVJ,GAAG,CAACM,KAAJ,CAAUH,KAFA,IAGVH,GAAG,CAACO,IAAJ,CAASJ,KAHb;;AAKA,QAAI,CAACA,KAAL,EAAY;AACR,YAAMK,QAAQ,GAAG,IAAIC,iBAAJ,CACb,KADa,EAEb,GAFa,EAGb,8CAHa,CAAjB;AAKA,aAAOR,GAAG,CAACS,MAAJ,CAAWF,QAAQ,CAACG,IAApB,EAA0BC,IAA1B,CAA+BJ,QAA/B,CAAP;AACH,KAfD,CAiBA;;;AACA,UAAM;AAAEK,MAAAA;AAAF,QAASC,sBAAIC,MAAJ,CAAWZ,KAAX,EAAkBa,OAAO,CAACC,GAAR,CAAYC,cAA9B,CAAf,CAlBA,CAoBA;;;AACA,UAAMC,IAAI,GAAG,MAAMtB,KAAK,CAACuB,OAAN,CAAc;AAC7BC,MAAAA,KAAK,EAAE;AAAER,QAAAA;AAAF,OADsB;AAE7BS,MAAAA,UAAU,EAAE;AACRC,QAAAA,OAAO,EAAE,CAAC,UAAD;AADD;AAFiB,KAAd,CAAnB;;AAMA,QAAI,CAACJ,IAAL,EAAW;AACP,YAAMX,QAAQ,GAAG,IAAIC,iBAAJ,CACb,KADa,EAEb,GAFa,EAGb,yCAHa,CAAjB;AAKA,aAAOR,GAAG,CAACS,MAAJ,CAAWF,QAAQ,CAACG,IAApB,EAA0BC,IAA1B,CAA+BJ,QAA/B,CAAP;AACH,KAlCD,CAoCA;;;AACAR,IAAAA,GAAG,CAACwB,cAAJ,GAAqBV,sBAAIC,MAAJ,CAAWZ,KAAX,EAAkBa,OAAO,CAACC,GAAR,CAAYC,cAA9B,CAArB;AACA,WAAOhB,IAAI,EAAX;AAEH,GAxCD,CAwCE,OAAOuB,KAAP,EAAc;AACZ,UAAMjB,QAAQ,GAAG,IAAIC,iBAAJ,CACb,KADa,EAEb,GAFa,EAGb,0CAHa,CAAjB;AAKA,WAAOR,GAAG,CAACS,MAAJ,CAAWF,QAAQ,CAACG,IAApB,EAA0BC,IAA1B,CAA+BJ,QAA/B,CAAP;AACH;AACJ,C;;gBApDCT,e,YAwDc,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACtC,MAAI;AAEA,UAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,IACVL,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CADU,IAEVJ,GAAG,CAACM,KAAJ,CAAUH,KAFA,IAGVH,GAAG,CAACO,IAAJ,CAASJ,KAHb;AAKH,GAPD,CAOC,OAAOsB,KAAP,EAAc;AACX,UAAMjB,QAAQ,GAAG,IAAIC,iBAAJ,CACb,KADa,EAEb,GAFa,EAGb,0CAHa,CAAjB;AAKA,WAAOR,GAAG,CAACS,MAAJ,CAAWF,QAAQ,CAACG,IAApB,EAA0BC,IAA1B,CAA+BJ,QAA/B,CAAP;AACH;AACJ,C;;eAEUT,e","sourcesContent":["\"use strict\";\n\nimport jwt from 'jsonwebtoken';\nimport Response from './response';\nimport models from '../database/models';\n\nconst { Users } = models;\n\nclass TokenValidation {\n\n    //  User Token Verification.\n    static userTokenValidation = async (req, res, next) => {\n        try {\n\n            //  Get the token from the \"Header, Query or Body\" if available.\n            const token = req.headers.authorization ||\n                req.headers['x-access-token'] ||\n                req.query.token ||\n                req.body.token;\n\n            if (!token) {\n                const response = new Response(\n                    false,\n                    401,\n                    \"Unauthorized, you did not provide any token.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Get the User \"id\".\n            const { id } = jwt.verify(token, process.env.JWT_SECRET_KEY);\n\n            //  If Token exist, then make sure that the respective User exists in the DB.\n            const user = await Users.findOne({\n                where: { id },\n                attributes: {\n                    exclude: ['password']\n                }\n            });\n            if (!user) {\n                const response = new Response(\n                    false,\n                    401,\n                    \"Unauthorized, this user does not exist.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Now append the decoded token to the the request body.\n            req.requestPayload = jwt.verify(token, process.env.JWT_SECRET_KEY);\n            return next();\n\n        } catch (error) {\n            const response = new Response(\n                false,\n                401,\n                \"Unauthorized, you have an invalid token.\"\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Other Token Verification.\n    static others = async (req, res, next) => {\n        try {\n\n            const token = req.headers.authorization ||\n                req.headers['x-access-token'] ||\n                req.query.token ||\n                req.body.token;\n\n        }catch (error) {\n            const response = new Response(\n                false,\n                401,\n                \"Unauthorized, you have an invalid token.\"\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n}\nexport default TokenValidation;\n"],"file":"token_validation.js"}