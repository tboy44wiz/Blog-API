{"version":3,"sources":["../../src/controllers/comments_controller.js"],"names":["Comments","models","CommentController","req","res","requestBody","body","error","value","JoiValidator","createCommentSchema","validate","response","Response","message","status","code","json","comment","create","console","log","id","params","findOne","where","comments","findAll","blogId","length","updateCommentSchema","updatedComment","update","isDeleted","destroy"],"mappings":"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","sourcesContent":["'use strict';\n\nimport models from '../database/models';\nimport Response from '../utils/response';\nimport JoiValidator from \"../utils/joi_validator\";\n\nconst { Comments } = models;\n\nclass CommentController {\n\n    //  Create a Comment.\n    static createComment = async (req, res) => {\n        try {\n\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = JoiValidator.createCommentSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Create Comment.\n            const comment = await Comments.create({ ...value });\n            if (!comment) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to create comment.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                \"Comment created successfully.\",\n                comment,\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            res.status(response.code).json(response);\n        }\n    }\n\n\n    //  Get a Single Comment.\n    static getSingleComment = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n\n            const comment = await Comments.findOne({\n                where: { id },\n            });\n            if (!comment) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No comment found.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Comment retrieved successfully.\",\n                { comment }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n    \n\n    //  Get all Comments for a Particular Blog.\n    static getAllCommentsForParticularBlog = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n\n            const comments = await Comments.findAll({\n                where: { blogId: id }\n            });\n            if (!comments.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No comment found.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Comments retrieved successfully.\",\n                { comments },\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Update a Comment.\n    static updateComment = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n            const  requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = JoiValidator.updateCommentSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Update Comment.\n            const updatedComment = await Comments.update({ ...value }, { where: { id } });\n            if (updatedComment[0] === 0) {\n                const response =  new Response(\n                    false,\n                    400,\n                    \"Failed to update comment.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Comment updated successfully.\",\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Delete a Comment.\n    static deleteComment = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n\n            const isDeleted = await Comments.destroy({ where: { id } });\n            if (isDeleted !== 1) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No comment found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Comment deleted successfully.\",\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Default.\n    static default = async (req, res) => {\n        try {\n\n            const response = new Response(\n                true,\n                200,\n                \"Leads retrieved successfully.\",\n                {  },\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n}\n\n\nexport default CommentController;"],"file":"comments_controller.js"}