{"version":3,"sources":["../../src/controllers/users_controller.js"],"names":["Users","models","UserController","req","res","requestBody","body","error","value","JoiValidator","userSignupSchema","validate","response","Response","message","status","code","json","user","created","findOrCreate","where","email","defaults","console","log","userLoginSchema","findOne","isPasswordMatched","bcrypt","compareSync","password","id","name","phone","role","token","jwt","sign","process","env","JWT_SECRET_KEY","expiresIn","userDataValues","dataValues","formattedResponse","params","attributes","exclude","users","findAll","length","payload","requestPayload","userUpdateSchema","foundItem","updatedUser","update","isDeleted","destroy"],"mappings":"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","sourcesContent":["'use strict';\n\nimport jwt from 'jsonwebtoken'\nimport bcrypt from 'bcryptjs';\n\nimport models from '../database/models';\nimport Response from '../utils/response';\nimport JoiValidator from \"../utils/joi_validator\";\n\nconst { Users } = models;\n\n\nclass UserController {\n    \n    //  User SignUp.\n    static signUpUser = async (req, res) => {\n        try {\n\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = JoiValidator.userSignupSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    409,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Check if Staff already exist and create a new Staff using the \"value\" gotten from the validated object.\n            const [user, created] = await Users.findOrCreate({\n                where: { email: value.email },\n                defaults: { ...value }\n            });\n            if (!created) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"User already exist.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                \"Successfully created a user.\",\n                { user }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            res.status(response.code).json(response);\n        }\n    };\n\n\n    //  User Login.\n    static loginUser = async (req, res) => {\n        try {\n\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = JoiValidator.userLoginSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const user = await Users.findOne({\n                where: { email: value.email },\n                /*include: [\n                    {\n                        model: Blogs,\n                        as: 'blogs'\n                    }\n                ]*/\n            });\n\n            if (!user) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Email or Password is not correct.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Compare the encrypted password.\n            const isPasswordMatched = bcrypt.compareSync(value.password, user.password );\n            if (!isPasswordMatched) {\n                const response = new Response(\n                    false,\n                    401,\n                    \"Incorrect password. Check your password or use 'Forget password' option.\"\n                );\n                return res.status(response.code).json(response);\n            };\n\n            const { id, name, phone, email, role } = user;\n\n            //  Create a Token that will be passed to the response.\n            const token = await jwt.sign(\n                { id, name, phone, email, role },\n                `${ process.env.JWT_SECRET_KEY }`,\n                { expiresIn: \"30d\" }\n            );\n\n            //  Now remove the \"password\" before returning the User.\n            const userDataValues = user.dataValues;\n            delete userDataValues.password;\n\n            const formattedResponse = {\n                ...userDataValues,\n                token\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"You're logged in successfully.\",\n                { ...formattedResponse }\n            );\n            res.status(response.code).json(response);\n\n        }catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            res.status(response.code).json(response);\n        }\n    };\n\n    //  Get a single User.\n    static getSingleUser = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const user = await Users.findOne({\n                where: { id },\n                attributes: {\n                    exclude: [\"password\"]\n                }\n            });\n\n            const response = new Response(\n                true,\n                200,\n                'User retrieved successfully.',\n                user\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    //  Get all Users.\n    static getAllUsers = async (req, res) => {\n        try {\n            const users = await Users.findAll({\n                attributes: {\n                    exclude: ['password']\n                }\n            });\n            if (!users.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No user found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Users retrieved successfully.',\n                users\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    //  Update a User.\n    static updateUser = async (req, res) => {\n        try {\n            const payload = req.requestPayload;\n            const { id } = req.params;\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = await JoiValidator.userUpdateSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  First check if a record has the email existing.\n            if (value.email) {\n                const foundItem = await Users.findOne({\n                    where: { email: value.email }\n                });\n                if (foundItem) {\n                    const response = new Response(\n                        false,\n                        400,\n                        \"Email already been used.\"\n                    );\n                    return res.status(response.code).json(response);\n                }\n            }\n\n            //  If No record found with the same email, then update.\n            const updatedUser = await Users.update({ ...value }, { where: { id } });\n            if (updatedUser[0] === 0) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to update user.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"User updated successfully.\"\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    //  Delete a User.\n    static deleteUser = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const isDeleted = await Users.destroy({\n                where: { id }\n            });\n            if (isDeleted !== 1) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No user found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"User deleted successfully.\"\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n}\n\nexport default UserController;"],"file":"users_controller.js"}