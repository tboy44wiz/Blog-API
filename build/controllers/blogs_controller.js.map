{"version":3,"sources":["../../src/controllers/blogs_controller.js"],"names":["Blogs","Users","Likes","Comments","models","BlogController","req","res","requestBody","body","error","value","JoiValidator","createBlogSchema","validate","response","Response","message","status","code","json","blog","created","findOrCreate","where","title","defaults","console","log","id","params","findOne","attributes","include","Sequelize","literal","model","as","exclude","group","blogs","findAll","length","role","requestPayload","updateBlogSchema","updatedBlog","update","isDeleted","destroy"],"mappings":"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","sourcesContent":["'use strict';\n\nimport Sequelize from 'sequelize';\nimport models from '../database/models';\nimport Response from '../utils/response';\nimport JoiValidator from \"../utils/joi_validator\";\n\nconst { Blogs, Users, Likes, Comments } = models;\n\nclass BlogController {\n\n    //  Create a Blog.\n    static createBlog = async (req, res) => {\n        try {\n\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = JoiValidator.createBlogSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Create a Blog.\n            const [blog, created] = await Blogs.findOrCreate({\n                where: { title: value.title },\n                defaults: { ...value }\n            });\n            if (!created) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Blog already exist.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                \"Blog created successfully.\",\n                blog,\n            );\n            return res.status(response.code).json(response);\n\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            res.status(response.code).json(response);\n        }\n    }\n\n\n    //  Get a Single Blog.\n    static getSingleBlog = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n\n            const blog = await Blogs.findOne({\n                where: { id },\n                attributes: {\n                    include: [\n                        [Sequelize.literal('COUNT(DISTINCT(likes))'), 'likesCount'],\n                        [Sequelize.literal('COUNT(DISTINCT(comments))'), 'commentsCount'],\n                    ]\n                },\n                include: [\n                    {\n                        model: Users,\n                        as: \"author\",\n                        attributes: {\n                            exclude: [\"password\", \"createdAt\", \"updatedAt\"]\n                        }\n                    },\n                    {\n                        model: Likes,\n                        as: \"likes\",\n                        attributes: []\n                    },\n                    {\n                        model: Comments,\n                        as: \"comments\",\n                        attributes: []\n                    }\n                ],\n                group: [\"Blogs.id\", \"author.id\"]\n            });\n            if (!blog) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No blog found.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Blog retrieved successfully.\",\n                blog\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n    \n\n    //  Get all Blogs.\n    static getAllBlogs = async (req, res) => {\n        try {\n            const blogs = await Blogs.findAll({\n                attributes: {\n                    include: [\n                        [Sequelize.literal('COUNT(DISTINCT(likes))'), 'likesCount'],\n                        [Sequelize.literal('COUNT(DISTINCT(comments))'), 'commentsCount'],\n                    ]\n                },\n                include: [\n                    {\n                        model: Users,\n                        as: 'author',\n                        attributes: [\"id\", \"name\"],\n                    },\n                    {\n                        model: Likes,\n                        as: \"likes\",\n                        attributes: []\n                    },\n                    {\n                        model: Comments,\n                        as: \"comments\",\n                        attributes: []\n                    }\n                ],\n                group: [\"Blogs.id\", \"author.id\"]\n            });\n            if (!blogs.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No blog found.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Blogs retrieved successfully.\",\n                blogs,\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Update a Blog.\n    static updateBlog = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n            const { role } = req.requestPayload;\n            const  requestBody = req.body;\n\n            if (role !== \"admin\") {\n                const response = new Response(\n                    false,\n                    401,\n                    `You are not permitted to update this blog.`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Validate the Request Body.\n            const { error, value } = JoiValidator.updateBlogSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Update Blog.\n            const updatedBlog = await Blogs.update({ ...value }, { where: { id } });\n            if (updatedBlog[0] === 0) {\n                const response =  new Response(\n                    false,\n                    400,\n                    \"Failed to update blog.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Blog updated successfully.\",\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Delete a Blog.\n    static deleteBlog = async (req, res) => {\n        try {\n\n            const { id } = req.params;\n\n            const isDeleted = await Blogs.destroy({ where: { id } });\n            if (isDeleted !== 1) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No blog found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Blog deleted successfully.\",\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    //  Default.\n    static default = async (req, res) => {\n        try {\n\n            const response = new Response(\n                true,\n                200,\n                \"Leads retrieved successfully.\",\n                {  },\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${ error }`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\",\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n}\n\n\nexport default BlogController;"],"file":"blogs_controller.js"}