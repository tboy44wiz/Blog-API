{"version":3,"sources":["../../../src/database/models/user.js"],"names":["module","exports","sequelize","DataTypes","User","Model","associate","models","hasMany","Blogs","as","foreignKey","onDelete","init","name","STRING","phone","email","password","role","ENUM","description","TEXT","socialMedia","ARRAY","picture","modelName","tableName","freezeTableName","beforeCreate","user","id","bcrypt","hashSync","afterCreate","dataValues"],"mappings":"AAAA;;AAGA;;AACA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,QAAMC,IAAN,SAAmBC,gBAAnB,CAAyB;AACvB;AACJ;AACA;AACA;AACA;AACoB,WAATC,SAAS,CAACC,MAAD,EAAS;AACvB;AAEAH,MAAAA,IAAI,CAACI,OAAL,CAAaD,MAAM,CAACE,KAApB,EAA2B;AACzBC,QAAAA,EAAE,EAAE,OADqB;AAEzBC,QAAAA,UAAU,EAAE,QAFa;AAGzBC,QAAAA,QAAQ,EAAE;AAHe,OAA3B;AAKD;;AAdsB;;AAexB;AACDR,EAAAA,IAAI,CAACS,IAAL,CAAU;AACRC,IAAAA,IAAI,EAAEX,SAAS,CAACY,MADR;AAERC,IAAAA,KAAK,EAAEb,SAAS,CAACY,MAFT;AAGRE,IAAAA,KAAK,EAAEd,SAAS,CAACY,MAHT;AAIRG,IAAAA,QAAQ,EAAEf,SAAS,CAACY,MAJZ;AAKRI,IAAAA,IAAI,EAAEhB,SAAS,CAACiB,IAAV,CAAe,OAAf,EAAwB,MAAxB,CALE;AAMRC,IAAAA,WAAW,EAAElB,SAAS,CAACmB,IANf;AAORC,IAAAA,WAAW,EAAEpB,SAAS,CAACqB,KAAV,CAAgBrB,SAAS,CAACY,MAA1B,CAPL;AAQRU,IAAAA,OAAO,EAAEtB,SAAS,CAACY;AARX,GAAV,EASG;AACDb,IAAAA,SADC;AAEDwB,IAAAA,SAAS,EAAE,OAFV;AAGDC,IAAAA,SAAS,EAAE,OAHV;AAIDC,IAAAA,eAAe,EAAE;AAJhB,GATH,EAjByC,CAkCzC;;AACAxB,EAAAA,IAAI,CAACyB,YAAL,CAAmBC,IAAD,IAAU;AAC1BA,IAAAA,IAAI,CAACC,EAAL,GAAU,eAAV;AACD,GAFD;AAGA3B,EAAAA,IAAI,CAACyB,YAAL,CAAmBC,IAAD,IAAU;AAC1BA,IAAAA,IAAI,CAACZ,QAAL,GAAgBc,kBAAOC,QAAP,CAAgBH,IAAI,CAACZ,QAArB,EAA+B,EAA/B,CAAhB;AACD,GAFD,EAtCyC,CA0CzC;;AACAd,EAAAA,IAAI,CAAC8B,WAAL,CAAkBJ,IAAD,IAAU;AACzB,WAAOA,IAAI,CAACK,UAAL,CAAgBjB,QAAvB;AACD,GAFD;AAKA,SAAOd,IAAP;AACD,CAjDD","sourcesContent":["'use strict';\n\n\nimport bcrypt from 'bcryptjs';\nimport { v4 as uuidV4 } from 'uuid';\nimport { Model } from 'sequelize';\n\nmodule.exports = (sequelize, DataTypes) => {\n  class User extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The `models/index` file will call this method automatically.\n     */\n    static associate(models) {\n      // define association here\n\n      User.hasMany(models.Blogs, {\n        as: \"blogs\",\n        foreignKey: \"userId\",\n        onDelete: \"CASCADE\"\n      });\n    }\n  };\n  User.init({\n    name: DataTypes.STRING,\n    phone: DataTypes.STRING,\n    email: DataTypes.STRING,\n    password: DataTypes.STRING,\n    role: DataTypes.ENUM('admin', 'user'),\n    description: DataTypes.TEXT,\n    socialMedia: DataTypes.ARRAY(DataTypes.STRING),\n    picture: DataTypes.STRING\n  }, {\n    sequelize,\n    modelName: 'Users',\n    tableName: 'Users',\n    freezeTableName: true,\n  });\n\n\n  //  Before the Records will be created, let's d the following.\n  User.beforeCreate((user) => {\n    user.id = uuidV4();\n  });\n  User.beforeCreate((user) => {\n    user.password = bcrypt.hashSync(user.password, 10);\n  });\n\n  //  After the record is persisted and before the persisted data are returned, let's remove the \"password\".\n  User.afterCreate((user) => {\n    delete user.dataValues.password\n  });\n\n\n  return User;\n};"],"file":"user.js"}