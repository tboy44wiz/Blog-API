{"version":3,"sources":["../../../src/database/models/comment.js"],"names":["module","exports","sequelize","DataTypes","Comment","Model","associate","models","belongsTo","Blogs","as","foreignKey","onDelete","init","blogId","UUID","userId","userName","STRING","body","TEXT","replyTo","modelName","tableName","freezeTableName","beforeCreate","comment","id"],"mappings":"AAAA;;AAGA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,QAAMC,OAAN,SAAsBC,gBAAtB,CAA4B;AAC1B;AACJ;AACA;AACA;AACA;AACoB,WAATC,SAAS,CAACC,MAAD,EAAS;AACvB;AAEAH,MAAAA,OAAO,CAACI,SAAR,CAAkBD,MAAM,CAACE,KAAzB,EAAgC;AAC9BC,QAAAA,EAAE,EAAE,MAD0B;AAE9BC,QAAAA,UAAU,EAAE,QAFkB;AAG9BC,QAAAA,QAAQ,EAAE;AAHoB,OAAhC,EAHuB,CASvB;AACA;AACA;AACA;AACA;AACD;;AApByB;;AAsB5BR,EAAAA,OAAO,CAACS,IAAR,CAAa;AACXC,IAAAA,MAAM,EAAEX,SAAS,CAACY,IADP;AAEXC,IAAAA,MAAM,EAAEb,SAAS,CAACY,IAFP;AAGXE,IAAAA,QAAQ,EAAEd,SAAS,CAACe,MAHT;AAIXC,IAAAA,IAAI,EAAEhB,SAAS,CAACiB,IAJL;AAKXC,IAAAA,OAAO,EAAElB,SAAS,CAACe;AALR,GAAb,EAMG;AACDhB,IAAAA,SADC;AAEDoB,IAAAA,SAAS,EAAE,UAFV;AAGDC,IAAAA,SAAS,EAAE,UAHV;AAIDC,IAAAA,eAAe,EAAE;AAJhB,GANH,EAvByC,CAqCzC;;AACApB,EAAAA,OAAO,CAACqB,YAAR,CAAsBC,OAAD,IAAa;AAChCA,IAAAA,OAAO,CAACC,EAAR,GAAa,eAAb;AACD,GAFD;AAIA,SAAOvB,OAAP;AACD,CA3CD","sourcesContent":["'use strict';\n\n\nimport { v4 as uuidV4 } from 'uuid';\nimport { Model } from 'sequelize';\n\nmodule.exports = (sequelize, DataTypes) => {\n  class Comment extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The `models/index` file will call this method automatically.\n     */\n    static associate(models) {\n      // define association here\n\n      Comment.belongsTo(models.Blogs, {\n        as: \"blog\",\n        foreignKey: \"blogId\",\n        onDelete: \"CASCADE\"\n      });\n\n      // Comment.hasMany(models.Likes, {\n      //   as: \"likes\",\n      //   foreignKey: \"commentId\",\n      //   onDelete: \"CASCADE\"\n      // })\n    }\n  }\n  Comment.init({\n    blogId: DataTypes.UUID,\n    userId: DataTypes.UUID,\n    userName: DataTypes.STRING,\n    body: DataTypes.TEXT,\n    replyTo: DataTypes.STRING\n  }, {\n    sequelize,\n    modelName: 'Comments',\n    tableName: 'Comments',\n    freezeTableName: true,\n  });\n\n\n  //  Before the Records will be created, let's d the following.\n  Comment.beforeCreate((comment) => {\n    comment.id = uuidV4();\n  });\n\n  return Comment;\n};"],"file":"comment.js"}