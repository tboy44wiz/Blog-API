{"version":3,"sources":["../../../src/database/models/blog.js"],"names":["module","exports","sequelize","DataTypes","Blog","Model","associate","models","belongsTo","Users","as","foreignKey","onDelete","hasMany","Likes","Comments","init","userId","UUID","title","STRING","body","TEXT","categories","ENUM","tags","ARRAY","isPublished","BOOLEAN","modelName","tableName","freezeTableName","beforeCreate","blog","id"],"mappings":"AAAA;;AAGA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,QAAMC,IAAN,SAAmBC,gBAAnB,CAAyB;AACvB;AACJ;AACA;AACA;AACA;AACoB,WAATC,SAAS,CAACC,MAAD,EAAS;AACvB;AAEAH,MAAAA,IAAI,CAACI,SAAL,CAAeD,MAAM,CAACE,KAAtB,EAA6B;AAC3BC,QAAAA,EAAE,EAAE,QADuB;AAE3BC,QAAAA,UAAU,EAAE,QAFe;AAG3BC,QAAAA,QAAQ,EAAE;AAHiB,OAA7B;AAMAR,MAAAA,IAAI,CAACS,OAAL,CAAaN,MAAM,CAACO,KAApB,EAA2B;AACzBJ,QAAAA,EAAE,EAAE,OADqB;AAEzBC,QAAAA,UAAU,EAAE,QAFa;AAGzBC,QAAAA,QAAQ,EAAE;AAHe,OAA3B;AAMAR,MAAAA,IAAI,CAACS,OAAL,CAAaN,MAAM,CAACQ,QAApB,EAA8B;AAC5BL,QAAAA,EAAE,EAAE,UADwB;AAE5BC,QAAAA,UAAU,EAAE,QAFgB;AAG5BC,QAAAA,QAAQ,EAAE;AAHkB,OAA9B;AAKD;;AA1BsB;;AA4BzBR,EAAAA,IAAI,CAACY,IAAL,CAAU;AACRC,IAAAA,MAAM,EAAEd,SAAS,CAACe,IADV;AAERC,IAAAA,KAAK,EAAEhB,SAAS,CAACiB,MAFT;AAGRC,IAAAA,IAAI,EAAElB,SAAS,CAACmB,IAHR;AAIRC,IAAAA,UAAU,EAAEpB,SAAS,CAACqB,IAAV,CAAe,SAAf,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,QAAnD,EAA6D,QAA7D,CAJJ;AAKRC,IAAAA,IAAI,EAAEtB,SAAS,CAACuB,KAAV,CAAgBvB,SAAS,CAACiB,MAA1B,CALE;AAMR;AACA;AACAO,IAAAA,WAAW,EAAExB,SAAS,CAACyB;AARf,GAAV,EASG;AACD1B,IAAAA,SADC;AAED2B,IAAAA,SAAS,EAAE,OAFV;AAGDC,IAAAA,SAAS,EAAE,OAHV;AAIDC,IAAAA,eAAe,EAAE;AAJhB,GATH,EA7ByC,CA8CzC;;AACA3B,EAAAA,IAAI,CAAC4B,YAAL,CAAmBC,IAAD,IAAU;AAC1BA,IAAAA,IAAI,CAACC,EAAL,GAAU,eAAV;AACD,GAFD;AAKA,SAAO9B,IAAP;AACD,CArDD","sourcesContent":["'use strict';\n\n\nimport { v4 as uuidV4 } from 'uuid';\nimport { Model } from 'sequelize';\n\nmodule.exports = (sequelize, DataTypes) => {\n  class Blog extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The `models/index` file will call this method automatically.\n     */\n    static associate(models) {\n      // define association here\n\n      Blog.belongsTo(models.Users, {\n        as: \"author\",\n        foreignKey: \"userId\",\n        onDelete: \"CASCADE\"\n      });\n\n      Blog.hasMany(models.Likes, {\n        as: \"likes\",\n        foreignKey: \"blogId\",\n        onDelete: \"CASCADE\"\n      });\n\n      Blog.hasMany(models.Comments, {\n        as: \"comments\",\n        foreignKey: \"blogId\",\n        onDelete: \"CASCADE\"\n      });\n    }\n  }\n  Blog.init({\n    userId: DataTypes.UUID,\n    title: DataTypes.STRING,\n    body: DataTypes.TEXT,\n    categories: DataTypes.ENUM('BackEnd', 'FrontEnd', 'MobileDev', 'DevOps', 'Others'),\n    tags: DataTypes.ARRAY(DataTypes.STRING),\n    // largeImage: DataTypes.STRING,\n    // thumNailImage: DataTypes.STRING,\n    isPublished: DataTypes.BOOLEAN\n  }, {\n    sequelize,\n    modelName: 'Blogs',\n    tableName: 'Blogs',\n    freezeTableName: true,\n  });\n\n\n  //  Before the Records will be created, let's d the following.\n  Blog.beforeCreate((blog) => {\n    blog.id = uuidV4();\n  });\n\n\n  return Blog;\n};"],"file":"blog.js"}